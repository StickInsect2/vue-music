cat readme.txt  查看
vi -> v/a -> ESC->  :wq/:x

git init 

git add file /git add .

git commit  file -m

git status

git log --pretty=oneline       显示从最近到最远的提交日志

git reset --hard HEAD^         回退到上一个版本

git reset --hard HEAD~num  回退到上num个版本

git reflog                               记录你的每一次命令：

git reset --hard 1094a         指定回到未来的某个版本

git diff HEAD -- readme.txt  可以查看工作区和版本库里面最新版本的区别

git checkout -- readme.txt   把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
                                             一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
                                             一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
                                             总之，就是让这个文件回到最近一次git commit或git add时的状态。


git reset head file                可以把暂存区的修改撤销掉（unstage），重新放回工作区
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。




删除文件
rm test.txt    本地删除
git rm test.txt    从版本库中删除该文件，那就用命令git rm删掉，并且git commit
git commit -m "remove test.txt"   

误删了本地文件（但是它之前已经被提交到版本库中）
git checkout -- test.txt（只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。）
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。




远程仓库
git remote add origin git@github.com:michaelliao/learngit.git           关联远程库

git push -u origin master           第一次推送master分支时，加上了-u参数，把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分                                                    支关联起来，在以后的推送或者拉取时就可以简化命令。

git pull --rebase origin master  如果第一次推送有错误。出现错误的主要原因是github中的README.md文件不在本地代码目录中。进行合并git pull --rebase origin master


git push origin master               本地master分支的最新修改推送至GitHub

git clone git@github.com:michaelliao/gitskills.git                                克隆一个远程仓库到本地


分支管理
git branch

git checkout -b dev /  git switch -c dev

git checkout master /  git switch master

git merge dev                            把dev分支的工作成果合并到master分支上。dev分支和master分支上的文件一模一样
                                                   git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
                                                   这种是Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。git不会生成一个新的commit

git branch -d dev                       删除dev分支



git log --graph --pretty=oneline --abbrev-commit          带参数的git log也可以看到分支的合并情况（git log --graph命令可以看到分支合并图。）


git merge --no-ff -m "merge with no-ff" dev       
请注意--no-ff参数，表示禁用Fast forward。因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。













